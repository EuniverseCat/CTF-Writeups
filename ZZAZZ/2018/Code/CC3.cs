using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace fools {
	class CC3 {
		const int PHOTO_SIZE = 0x80;
		const int KEY_SIZE = 10;
		const char ENCODING_OFFSET = (char)('\xf6' - '0');

		static byte[] photoConst = new byte[PHOTO_SIZE] {
			0x7D, 0xBC, 0x5D, 0x92, 0xC7, 0x66, 0xFB, 0x16,
			0xB3, 0xC7, 0x25, 0x39, 0x07, 0x65, 0xE4, 0x00,
			0x2E, 0xCE, 0xBC, 0xA8, 0xDF, 0x6A, 0x85, 0xE7,
			0x8E, 0x5E, 0x49, 0x51, 0xD9, 0x8E, 0xFC, 0x5C,
			0xD5, 0xCA, 0x3E, 0x0E, 0x90, 0xF8, 0x6A, 0x3E,
			0x38, 0xC1, 0xBE, 0x33, 0xDC, 0x4B, 0xCE, 0x04,
			0x50, 0x4D, 0x50, 0xA3, 0xE7, 0x80, 0x88, 0xDB,
			0xEF, 0x6D, 0xC8, 0xB4, 0x3F, 0xEB, 0x3B, 0x39,
			0xA0, 0x64, 0xEE, 0xC4, 0xE3, 0xA0, 0x89, 0x2F,
			0x83, 0xD1, 0x98, 0x62, 0xB6, 0xFF, 0xEB, 0x07,
			0x0F, 0xC2, 0xE8, 0xDB, 0x53, 0xDA, 0x0B, 0xFA,
			0x16, 0x53, 0x9B, 0x51, 0x6F, 0xB3, 0xD8, 0x5E,
			0xBD, 0x05, 0xD1, 0xD6, 0x0D, 0xF6, 0x66, 0xBC,
			0x89, 0x84, 0x44, 0xAD, 0x68, 0x09, 0x4C, 0x00,
			0x9F, 0x60, 0x8D, 0x79, 0xAB, 0x73, 0xF8, 0x12,
			0x98, 0xE1, 0x56, 0x62, 0x36, 0x9B, 0xDF, 0xE7
		};
		static byte[] photo = new byte[PHOTO_SIZE];
		static byte[] bitfield = new byte[0x100] {
			0x6D, 0xE5, 0x9A, 0x4C, 0xC7, 0x35, 0x1A, 0x3B, 0x78, 0xFB, 0x02, 0x84, 0x7B, 0x4B, 0x4A, 0xC0,
			0x6C, 0x9B, 0x36, 0x1F, 0x34, 0x4D, 0xCE, 0x24, 0xB9, 0xE0, 0x29, 0x54, 0x99, 0x67, 0x19, 0x21,
			0x73, 0xCB, 0x57, 0x46, 0x2F, 0xDF, 0x5E, 0x43, 0x72, 0x7A, 0x28, 0xB0, 0x0F, 0xF6, 0x49, 0xE2,
			0x12, 0xF0, 0x09, 0x44, 0xCD, 0x69, 0x95, 0x6B, 0xD3, 0xD1, 0xE6, 0x87, 0x92, 0xF7, 0xDD, 0x89,
			0xC2, 0x63, 0xEA, 0x1D, 0xBB, 0xA7, 0x0A, 0x48, 0x93, 0x90, 0xC1, 0x08, 0x14, 0x1B, 0x79, 0x91,
			0x65, 0xF8, 0x0D, 0xD8, 0xD0, 0x47, 0xE1, 0xF9, 0x15, 0x9E, 0x05, 0x41, 0xC8, 0xB7, 0x0E, 0x7E,
			0x22, 0xE9, 0xDA, 0xB1, 0x62, 0x13, 0x26, 0x42, 0xAB, 0xD4, 0x5C, 0x4F, 0x74, 0xC4, 0x04, 0x66,
			0xD6, 0x5F, 0x38, 0x4E, 0x10, 0xA5, 0x75, 0x52, 0xAA, 0xFE, 0xF2, 0xA3, 0x70, 0x25, 0x82, 0x3A,
			0x0C, 0x9D, 0x97, 0x56, 0x7D, 0xD5, 0xA4, 0xE8, 0xAF, 0x11, 0xB8, 0x33, 0xE4, 0xF4, 0x3E, 0x60,
			0xCC, 0x5A, 0xFD, 0x71, 0xDE, 0x94, 0x7F, 0x40, 0x53, 0xD7, 0xF3, 0x03, 0x96, 0xBF, 0x17, 0x2C,
			0x98, 0xF5, 0x50, 0x8A, 0x88, 0x59, 0xAC, 0x6E, 0x8E, 0x77, 0xC5, 0x58, 0x8D, 0xC9, 0xB5, 0xBE,
			0x3F, 0xEC, 0xA2, 0xBC, 0xA0, 0x23, 0x0B, 0x85, 0xB2, 0x86, 0x07, 0x61, 0xD9, 0xA1, 0x8F, 0x7C,
			0x01, 0x64, 0xAD, 0x3C, 0xFF, 0x06, 0x8B, 0xA8, 0xE3, 0x76, 0x31, 0x80, 0xEF, 0x81, 0x51, 0x32,
			0x45, 0xDB, 0x3D, 0x1E, 0x20, 0xBA, 0x8C, 0x27, 0x30, 0x6A, 0xD2, 0xB3, 0x18, 0xB4, 0xC6, 0xFC,
			0x55, 0x1C, 0xDC, 0xEB, 0xAE, 0xF1, 0xA6, 0xCA, 0x6F, 0x5B, 0x9F, 0x16, 0x9C, 0xCF, 0xB6, 0xEE,
			0x39, 0xA9, 0x2A, 0x68, 0x37, 0xFA, 0x5D, 0x83, 0x00, 0x2D, 0xED, 0x2E, 0x2B, 0xE7, 0xBD, 0xC3,
		};
		static byte[] photoKey = new byte[KEY_SIZE];
		static byte[] midwayKey = new byte[KEY_SIZE];
		//correct midway key, found with commented code and a sample size of 10K
		static byte[] midwayGoal = new byte[KEY_SIZE] { 0x7d, 0xbc, 0x5d, 0x92, 0xc7, 0x66, 0xfb, 0x16, 0xb3, 0xc7 };
		static List<byte>[] midwayCollection = new List<byte>[KEY_SIZE];

		static string currentKey;

		public static void _Main() {
			System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
			sw.Start();
			for (int i = 0; i < KEY_SIZE; i++) {
				midwayCollection[i] = new List<byte>();
			}
			//*
			long keyi = 0;
			
			for (; ; ) {
				currentKey = GetNewKey(ref keyi);
				DecryptPhoto(currentKey);
				AnalyzePhoto();
				if (keyi == 10000000000)
					break;
				if (keyi % 10000000 == 0)
					Console.WriteLine($"{keyi / 10000000} * 10M: {sw.Elapsed}");
			}
			//*/
			//AnalyzeLists();

			//non brute-force method
			/*
			photoKey = midwayGoal;
			Console.WriteLine();
			for (int i = 0; i < 25; i++) {
				ReverseKey();
			}
			foreach (byte b in photoKey)
				Console.Write((char)(b - ENCODING_OFFSET));
			Console.Write("\n" + sw.Elapsed.ToString());
			//*/
		}

		static string GetNewKey(ref long key) {
			string s = key.ToString("D10");
			key++;
			return s;
		}

		static void DecryptPhoto(string key) {
			photo = (byte[])photoConst.Clone();
			for (int j = 0; j < KEY_SIZE; j++) {
				photoKey[j] = (byte)(key[j] + ENCODING_OFFSET);
			}
			for (int i = 0; i < 25; i++) {
				ScrambleKey(photoKey[KEY_SIZE - 1]);
			}
			midwayKey = (byte[])photoKey.Clone();
			//XorPhoto();
		}

		static void ScrambleKey(byte b) {
			int photoKeyIndex = 0;
			byte a;
			for (int i = 0; i < KEY_SIZE; i++, photoKeyIndex++) {
				a = photoKey[photoKeyIndex];
				//rotate right
				a = (byte)((a << 7) + (a >>= 1));
				a ^= 0x5C;
				a += 0x1E;
				a = GetByteOfBitfield(a);
				a ^= b;
				b = a;
				photoKey[photoKeyIndex] = a;
			}
		}       
		
		//worked this out well after completing this challenge
		static void ReverseKey() {
			byte[] shiftedKey = new byte[KEY_SIZE];
			//build a key with the bytes which the previous key was XORed with
			for (int i = 0; i < KEY_SIZE - 1; i++)
				shiftedKey[i + 1] = photoKey[i];
			byte a;
			for (int i = KEY_SIZE - 1; i >= 0; i--) {
				a = photoKey[i];
				if (i != 0)
					a ^= shiftedKey[i];
				else
					//the first byte is XORed with the last byte of the current key
					a ^= photoKey[KEY_SIZE - 1];
				a = (byte)Array.IndexOf(bitfield, a);
				a -= 0x1E;
				a ^= 0x5C;
				a = (byte)((a >> 7) + (a <<= 1));
				photoKey[i] = a;
			}
		}

		static void XorPhoto() {
			int photoKeyIndex = 0;
			int photoIndex = 0;
			for (int i = 0; i < PHOTO_SIZE; i++) {
				photo[photoIndex] ^= photoKey[photoKeyIndex];
				photoIndex++;
				photoKey[photoKeyIndex] = GetByteOfBitfield(photoKey[photoKeyIndex]);
				photoKeyIndex++;
				if (photoKeyIndex == KEY_SIZE)
					photoKeyIndex = 0;
			}
		}

		static byte GetByteOfBitfield(int a) {
			return bitfield[a];
		}

		static void AnalyzePhoto() {

			for (int i = 0; i < KEY_SIZE; i++) {
				if (midwayKey[i] != midwayGoal[i])
					return;
			}
			PrintPhotoData(-1);
			/*
			int matches = photo.Count(b => b == 0 || b == 255);
			if (matches > 5) {
				for (int i = 0; i < KEY_SIZE; i++) {
					midwayCollection[i].Add(midwayKey[i]);
				}
			}
			*/
		}

		static void AnalyzeLists() {
			for (int i = 0; i < KEY_SIZE; i++) {
				var commonBytes = midwayCollection[i].GroupBy(b => b).OrderByDescending(g => g.Count()).ToList();
				StringBuilder sb = new StringBuilder($"Byte {i} guesses: ");
				for (int j = 0; j < 3; j++)
					sb.Append($"0x{commonBytes[j].Key.ToString("x2")}: {commonBytes[j].Count()} ");
				Console.WriteLine(sb);
			}
		}

		static void PrintPhotoData(int matches) {
			Console.Write(currentKey + " " + matches + " ");
			foreach (byte b in midwayKey)
				Console.Write(b.ToString("x2"));
			Console.Write(" ");
			foreach (byte b in photoKey)
				Console.Write(b.ToString("x2"));
			Console.WriteLine();
		}
	}
}
