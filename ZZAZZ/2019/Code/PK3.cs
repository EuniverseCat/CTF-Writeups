using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

namespace fools {
	class PK3 {
		const int MAP_SIZE = 0x200;
		const uint INITIAL_SEED = 0x5d0b1c11;
		const uint OUTER_LOOP_MULTIPLIER = 0x35e79125;
		const uint OUTER_LOOP_INCREMENT = 0x56596b10;
		const int OUTER_LOOP_LENGTH = 0x7ffffb0a;
		const int INNER_LOOP_LENGTH = 0x1b080733;

		ushort innerSeed;
		byte innerLoopMultiplier;
		byte innerLoopIncrement;
		byte[] map = new byte[MAP_SIZE] {
			0x15, 0xC8, 0x7B, 0x6B, 0x7F, 0xA1, 0xA3, 0x29, 0xE8, 0x81, 0x01, 0x99, 0x9F, 0xEB, 0xF2, 0x80,
			0x5F, 0xA3, 0x96, 0x7C, 0x17, 0xDB, 0xD2, 0x41, 0xA1, 0xBC, 0xBB, 0x13, 0xBC, 0xD8, 0xC3, 0x09,
			0xF4, 0x02, 0x1B, 0x95, 0xF3, 0x72, 0x65, 0xDB, 0x6F, 0x82, 0x9E, 0x52, 0xD9, 0x89, 0xD8, 0xDF,
			0x5A, 0xB0, 0x03, 0xF2, 0x9A, 0xE6, 0xEF, 0x81, 0x32, 0xA5, 0x57, 0x60, 0xE0, 0xC8, 0x2D, 0x8C,
			0x52, 0x63, 0x5D, 0xD8, 0x0F, 0x72, 0xDF, 0xA1, 0x36, 0x1C, 0x3E, 0xC8, 0xC2, 0x4F, 0x1E, 0xFD,
			0x1D, 0x11, 0x0C, 0x74, 0x13, 0x21, 0x49, 0xAD, 0xC0, 0xD9, 0xBA, 0xDA, 0x0D, 0xE4, 0x06, 0x8E,
			0x94, 0xE6, 0x25, 0x8B, 0xBA, 0xC2, 0x2B, 0x92, 0x0A, 0x90, 0xA1, 0x4A, 0x06, 0x53, 0x84, 0x79,
			0xE5, 0xE7, 0xCF, 0x60, 0x74, 0xD2, 0x3B, 0x2A, 0xE0, 0x56, 0x32, 0xA6, 0x10, 0x69, 0x52, 0x0F,
			0xD3, 0x3D, 0x7F, 0xF3, 0x12, 0x6D, 0x00, 0x57, 0x41, 0x3F, 0x96, 0x3B, 0x08, 0xB7, 0x48, 0x72,
			0xB2, 0x1E, 0x12, 0x57, 0x60, 0x95, 0x23, 0xC8, 0xAB, 0x52, 0xC8, 0x3F, 0xC4, 0xC0, 0x50, 0xC1,
			0xD3, 0x38, 0x28, 0x6E, 0x96, 0x6D, 0xDF, 0x8F, 0x41, 0x24, 0x21, 0x91, 0xF4, 0x64, 0x3E, 0xC9,
			0xE6, 0xC7, 0x45, 0x26, 0xA1, 0x4C, 0x0A, 0xD3, 0x2F, 0x8F, 0x77, 0x7D, 0x68, 0x86, 0x23, 0x43,
			0xCF, 0xBF, 0xE1, 0xF4, 0xC8, 0x9E, 0x35, 0x5A, 0x11, 0x26, 0xB7, 0x9F, 0x23, 0xCD, 0x68, 0xA2,
			0xB5, 0xCA, 0xD3, 0x53, 0x95, 0xDA, 0x0B, 0x87, 0x15, 0xCA, 0xE7, 0x73, 0xBD, 0x66, 0x39, 0x90,
			0xC0, 0xA4, 0x94, 0x94, 0x3E, 0x61, 0x9E, 0xEF, 0x89, 0x1E, 0x93, 0x13, 0xC1, 0xFA, 0xD9, 0xEE,
			0x5B, 0x27, 0x71, 0x16, 0xCD, 0xA2, 0xEF, 0x49, 0xCC, 0xD6, 0x1D, 0x24, 0xA6, 0x3B, 0x89, 0x94,
			0x58, 0x28, 0xD2, 0x83, 0x5B, 0x25, 0x8A, 0x5F, 0x25, 0xFE, 0xE3, 0x2D, 0xE8, 0x58, 0x5E, 0xBB,
			0x9B, 0xD5, 0xE8, 0x46, 0xA5, 0xDC, 0xDE, 0x8F, 0x97, 0x03, 0xF1, 0x16, 0x01, 0xFC, 0x2E, 0x3F,
			0x47, 0x5B, 0xAF, 0x71, 0x2E, 0x7F, 0x19, 0xCE, 0xE3, 0x7D, 0xE2, 0x49, 0x5E, 0x71, 0x0A, 0x57,
			0xE1, 0x98, 0xAC, 0xDD, 0x7F, 0xFD, 0x5D, 0xAE, 0xDC, 0x24, 0xC5, 0x30, 0x3B, 0x65, 0xC1, 0xD6,
			0xF4, 0x62, 0xA0, 0xEE, 0xBC, 0x86, 0x68, 0xB4, 0x05, 0x68, 0x1B, 0xDB, 0x5C, 0xA8, 0x25, 0x92,
			0x70, 0xC8, 0xA5, 0xF6, 0x1A, 0x55, 0xAD, 0xAE, 0x44, 0x2A, 0x4A, 0x77, 0xCA, 0x2D, 0x6B, 0xDD,
			0x47, 0x51, 0x95, 0x58, 0xFF, 0x75, 0xDD, 0x30, 0x81, 0x80, 0x1B, 0xDB, 0xC2, 0xA9, 0x29, 0xCE,
			0xA8, 0xD6, 0xD8, 0x08, 0xC1, 0x86, 0x1C, 0xEC, 0x0F, 0x63, 0x48, 0x38, 0x1B, 0xEB, 0x32, 0xE3,
			0xA0, 0xE6, 0x28, 0x5E, 0xF4, 0x0A, 0xA2, 0x2D, 0xF1, 0xB0, 0x61, 0xFC, 0xDD, 0x4C, 0x6B, 0x43,
			0xE8, 0x82, 0x04, 0xE8, 0xF3, 0x3D, 0x43, 0xF5, 0x6D, 0x4E, 0x8A, 0x45, 0xC9, 0x6A, 0x96, 0x1D,
			0x37, 0x93, 0x76, 0x53, 0x9E, 0x33, 0x0A, 0xAF, 0x08, 0x3E, 0x80, 0xFC, 0xE7, 0xC5, 0x17, 0x69,
			0xE7, 0x91, 0x55, 0x52, 0x4A, 0xA5, 0x51, 0x06, 0xA8, 0x3E, 0x82, 0x1D, 0xFF, 0x27, 0x14, 0xEE,
			0x26, 0x39, 0x55, 0xC0, 0x8F, 0xD7, 0xF2, 0x47, 0x14, 0x9A, 0x54, 0x5E, 0xAC, 0x9A, 0xC2, 0x93,
			0xC0, 0x96, 0x60, 0x44, 0x11, 0x08, 0xED, 0x22, 0x20, 0x44, 0x77, 0xB3, 0xFC, 0x78, 0xE5, 0xDA,
			0x0A, 0xC5, 0xA1, 0xBE, 0x64, 0x80, 0x25, 0x20, 0xA7, 0xFB, 0x3E, 0xDB, 0x26, 0x39, 0x99, 0x2A,
			0xEE, 0xA3, 0x36, 0x7B, 0xB6, 0x63, 0x24, 0xF6, 0xF6, 0x13, 0x0E, 0x83, 0x86, 0x1F, 0x3A, 0x0F,
		};

		ushort[] seedIndices = new ushort[0x10000];

		static Stopwatch sw;

		byte InnerLCG() {
			innerSeed >>= 1;
			innerSeed *= innerLoopMultiplier;
			innerSeed += innerLoopIncrement;
			return (byte)innerSeed;
		}

		unsafe void InitSeedArray() {
			fixed (ushort* ptr = &seedIndices[0]) {
				//at this point i should just port this to C, relying on this for fast memset() is dumb
				//but this is like 20x faster lol
				//gotta save those 40 milliseconds
				System.Runtime.CompilerServices.Unsafe.InitBlock(ptr, 0xFF, 0x20000);
			}
		}

		void LoopInnerLCG(int loops, bool tryToShorten = false, int mapIndex = 0) {
			int period = 0;
			InitSeedArray();
			for (int i = 0; i < loops; i++) {
				map[mapIndex] ^= InnerLCG();
				mapIndex++;
				if (mapIndex >= MAP_SIZE) {
					mapIndex = 0;
				}
				if (tryToShorten) {
					if (period == 0 && seedIndices[innerSeed] != 0xFFFF) {
						period = i - seedIndices[innerSeed];
						int effectivePeriod = (period * MAP_SIZE * 2) / (int)GCD((uint)period, MAP_SIZE);
						i = loops - (loops - i) % effectivePeriod;
					}
					seedIndices[innerSeed] = (ushort)i;
				}

			}
		}

		static uint GCD(uint a, uint b) {
			while (a != 0 && b != 0) {
				if (a > b)
					a %= b;
				else
					b %= a;
			}
			return a | b;
		}

		uint SimulateRunOfOuterLCG(uint seed, int innerLoopLength) {
			SimulateRunOfOuterLCG((byte)(seed >> 8), (byte)(seed >> 16), (byte)(seed >> 24), innerLoopLength);
			seed *= OUTER_LOOP_MULTIPLIER;
			seed += OUTER_LOOP_INCREMENT;
			return seed;
		}

		void SimulateRunOfOuterLCG(byte innerSeed, byte innerLoopMultiplier, byte innerLoopIncrement, int innerLoopLength) {
			this.innerSeed = innerSeed;
			this.innerLoopMultiplier = innerLoopMultiplier;
			this.innerLoopIncrement = innerLoopIncrement;
			LoopInnerLCG(innerLoopLength, true);
		}


		//My initial solution -- I've improved on this considerably
		void Run_Old() {
			List<int> odds = new List<int>();

			const string FILENAME = "generatedSeeds.xml";

			if (!File.Exists(FILENAME)) {
				byte[] data = new byte[0x1000000];
				uint result = INITIAL_SEED;
				for (int i = 0; i < OUTER_LOOP_LENGTH; i++) {
					uint effectiveResult = result >> 8;
					data[effectiveResult]++;
					result = SimulateRunOfOuterLCG(result, 0);
				}
				Console.WriteLine(result.ToString("x8"));

				for (int j = 0; j < 0x1000000; j++) {
					if (data[j] % 2 != 0)
						odds.Add(j);
				}
				using (var fs = File.Create(FILENAME)) {
					XmlSerializer xml = new XmlSerializer(typeof(List<int>));
					xml.Serialize(fs, odds);
					fs.Flush();
					fs.Close();
				}
			}
			else {
				using (var fs = File.OpenRead(FILENAME)) {
					XmlSerializer xml = new XmlSerializer(typeof(List<int>));
					odds = (List<int>)xml.Deserialize(fs);
				}
			}

			Console.WriteLine(odds.Count);
			foreach (int odd in odds) {
				Console.WriteLine(odd.ToString("x6") + " " + sw.Elapsed.ToString());
				SimulateRunOfOuterLCG(((uint)odd) << 8, INNER_LOOP_LENGTH);
			}
		}

		void Run() {
			//found with extended euclidean algorithm
			const uint MOD_INVERSE = 0x5d8c22ad;
			uint result = INITIAL_SEED;

			for (int i = 0; i < 0x80000000 - OUTER_LOOP_LENGTH; i++) {
				//calculate previous output of outer lcg
				result = (result - OUTER_LOOP_INCREMENT) * MOD_INVERSE;
				SimulateRunOfOuterLCG(result, INNER_LOOP_LENGTH);
			}
			Console.WriteLine(sw.Elapsed);

		}

		public static void _Main() {
			PK3 pk3 = new PK3();
			sw = new Stopwatch();
			sw.Start();

			pk3.Run();

			PrintAOB(pk3.map);
		}

		static void PrintAOB(byte[] arr) {
			foreach (byte b in arr)
				Console.Write(b.ToString("x2"));
			Console.WriteLine();
		}
	}
}
